#!/usr/bin/env python
import os
import sys
import csv

import config
from output_parser import RepertoireOutput
from scatter_hist import histogram


class DiffToFileMapping:
    def __init__(self, conv_dir):
        self.convDir  = conv_dir
        self.diff2file = {}  #diff line to src file name

    def walk_dir(self):
        print "directory name = " + self.convDir
        for fileName in os.listdir(self.convDir):
            if (config.DEBUG == 1):
                print fileName
            fname = self.convDir + os.sep + fileName
            try:
                csvfile = open(fname,"r")
                reader = csv.reader(csvfile,delimiter=',')
                for row in reader:
                    diff_line_num = row[0].strip()
                    if diff_line_num.startswith("src"):
                        pass
                    else:
                        srcFileName = row[2]
                        f = os.path.basename(fileName)
                        f = os.path.splitext(f)[0]
                        self.diff2file[(f,diff_line_num)] = srcFileName
            except IOError as e:
                print fileName + " doesnot exist"



def file_dist(rep_out_path, conv_dir1, conv_dir2):
    rep_out = RepertoireOutput()
    convDir1 = DiffToFileMapping(conv_dir1)
    convDir2 = DiffToFileMapping(conv_dir2)

    convDir1.walk_dir()
    convDir2.walk_dir()

    fileDist = {}
    rep_out.loadFromFile(rep_out_path,1)

#    print rep_out.clones

    for cloneIdx, (clone1, clone2, metric) in rep_out.getCloneIter():
        fidx1, start1, end1 = clone1
        fidx2, start2, end2 = clone2

        diff_file1 = os.path.basename(rep_out.getFilePath(fidx1))
        diff_file1 = os.path.splitext(diff_file1)[0]
        start1 = str(start1)
        diff_file2 = os.path.basename(rep_out.getFilePath(fidx2))
        diff_file2 = os.path.splitext(diff_file2)[0]
        start2 = str(start2)

        src_file1 = convDir1.diff2file.get((diff_file1,start1), -1)
        src_file2 = convDir2.diff2file.get((diff_file2,start2), -1)

        key = (src_file1,src_file2)
        if (fileDist.has_key(key) == 0):
            fileDist[key] = 0
        fileDist[key] += 1

    return fileDist

#---------------testing-----------------#

if __name__ == "__main__":
    if (len(sys.argv) < 5):
         print "Usage: filedist.py rep_out.txt conv_dir1 conv_dir2 output"
         print "rep_out.txt is the output from repertoire"
         print "conv_dirN contains all files that is generated by parsing filtered diff files"
         print "format: diff_line_no | source_file_line_no| source_file_name"
         print "output is the output file"
         sys.exit(2)

    rep_out = sys.argv[1]
    conv_dir1 = sys.argv[2]
    conv_dir2 = sys.argv[3]
    dist_file = sys.argv[4]

    fileDistSet = file_dist(rep_out, conv_dir1, conv_dir2)
    print fileDistSet
#    for item in fileDistSet:
#        print item
#    hist = histogram()
#    hist.set_value(fileDistSet)
#    hist.drawHist()

